package com

import org.apache.spark.sql.functions._
import tools.SparkCore.spark
import tools.PostgresConnection.{connection, password, statement, url, username}
import java.sql.ResultSet

object TestC extends App {

  // Step 1: Read the CSV file
  val csvd  = spark.read.option("header", "true").csv("src/main/resources/data/african_crises.csv")

  csvd.printSchema()

  // Step 2: Fetch the max value of 'casee' from the database
  val query = "SELECT MAX(casee) AS max_casee FROM crisis_data"
  val resultSet: ResultSet = statement.executeQuery(query)

  var re: Int = 0 // Default value in case no max value is found
  if (resultSet.next()) {
    re = resultSet.getInt("max_casee")
  }

  // Step 3: Process the CSV and filter based on the max 'casee' value
  val result = csvd
    .withColumn("casee", col("casee").cast("int"))
    .withColumn("cc3", col("cc3").cast("string"))
    .withColumn("country", col("country").cast("string"))
    .withColumn("year", col("year").cast("int"))
    .withColumn("systemic_crisis", col("systemic_crisis").cast("boolean"))
    .withColumn("exch_usd", col("exch_usd").cast("decimal(10, 6)"))
    .withColumn("domestic_debt_in_default", col("domestic_debt_in_default").cast("boolean"))
    .withColumn("sovereign_external_debt_default", col("sovereign_external_debt_default").cast("boolean"))
    .withColumn("gdp_weighted_default", col("gdp_weighted_default").cast("decimal(10, 6)"))
    .withColumn("inflation_annual_cpi", col("inflation_annual_cpi").cast("decimal(10, 6)"))
    .withColumn("independence", col("independence").cast("boolean"))
    .withColumn("currency_crises", col("currency_crises").cast("boolean"))
    .withColumn("inflation_crises", col("inflation_crises").cast("boolean"))
    .withColumn("banking_crisis", col("banking_crisis").cast("string"))
    .withColumn("creationdate", col("creationdate").cast("timestamp"))
    .filter(col("casee") > re) // Filter where 'casee' is greater than max 'casee' from DB

  // Step 4: Show the filtered results
  result.printSchema()
  result.show()

  // Step 5: Optionally write the filtered result back to the database
  // result.write
  //   .format("jdbc")
  //   .option("url", url)
  //   .option("dbtable", "crisis_data")
  //   .option("user", username)
  //   .option("password", password)
  //   .mode("append")
  //   .save()

  println("done")
  statement.close()
  connection.close()
}
